#!/usr/bin/env python3

import os
import subprocess
import sys
from enum import Enum
from pathlib import Path
from typing import List

import typer
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.text import Text

app = typer.Typer(
    name="rt",
    help="🎲 Raddle Teams Command Runner - Development tools for the Raddle Teams project",
    rich_markup_mode="rich",
    context_settings={"help_option_names": ["-h", "--help"]},
    add_completion=True,
    no_args_is_help=True,
)

PROJECT_ROOT = Path(__file__).parent.absolute()
console = Console()


def rerun_in_poetry():
    if "VIRTUAL_ENV" not in os.environ and "POETRY_ACTIVE" not in os.environ:
        console.print("[bright_yellow]🔄 Switching to Poetry environment...[/bright_yellow]")
        try:
            # cd to the project root
            os.chdir(PROJECT_ROOT)
            # Re-execute this script with poetry run
            os.execvp("poetry", ["poetry", "run", "python"] + sys.argv)
        except (subprocess.CalledProcessError, FileNotFoundError):
            # Poetry not available or not a poetry project, exit gracefully
            console.print("[bold red]❌ Poetry is not installed or this is not a Poetry project.[/bold red]")
            raise typer.Exit(1)


def run_command(cmd: List[str], description: str) -> int:
    with Progress(
        SpinnerColumn(),
        TextColumn("[bold blue]{task.description}"),
        console=console,
    ) as progress:
        task = progress.add_task(f"[bright_yellow]🔄 {description}...", total=None)
        console.print(f"[dim blue]   💻 Running: {' '.join(cmd)}[/dim blue]")

        result = subprocess.run(cmd, cwd=PROJECT_ROOT)
        progress.update(task, completed=True)

        if result.returncode == 0:
            console.print(f"[bold green]✅ {description} completed successfully![/bold green]")
        else:
            console.print(f"[bold red]❌ {description} failed![/bold red]")

        return result.returncode


def run_command_in_background(cmd: List[str], description: str) -> subprocess.Popen:
    console.print(f"[bright_yellow]🔄 {description}...[/bright_yellow]")
    console.print(f"[dim blue]   🌌 Running in background: {' '.join(cmd)}[/dim blue]")
    process = subprocess.Popen(cmd, cwd=PROJECT_ROOT)
    console.print(f"[green]✅ Started background process (PID: {process.pid})[/green]")
    return process


def add_command_and_aliases(command, name: str, aliases: List[str], help: str | None = None, *args, **kwargs):
    help = help or command.__doc__

    if aliases:
        alias_str = ", ".join(aliases)
        max_alias_length = 22
        padding = max_alias_length - len(alias_str)
        padding_str = " " * max(padding, 1)

        if help:
            help = f"[bold bright_green]{alias_str}[/bold bright_green]{padding_str}{help}"
        else:
            help = f"[bold bright_green]{alias_str}[/bold bright_green]"

    app.command(name=name, *args, **kwargs, help=help)(command)
    for alias in aliases:
        app.command(name=alias, *args, **kwargs, hidden=True)(command)


class LogLevel(str, Enum):
    CRITICAL = "critical"
    ERROR = "error"
    WARNING = "warning"
    INFO = "info"
    DEBUG = "debug"
    TRACE = "trace"


def build(
    watch: bool = typer.Option(
        False, "--watch", "-w", help="👀 Watch for changes and rebuild continuously", is_flag=True
    ),
):
    if watch:
        cmd = ["npx", "vite", "build", "--watch"]
        description = "Building frontend with watch mode"
    else:
        cmd = ["npx", "vite", "build"]
        description = "Building frontend"

    return run_command(cmd, description)


add_command_and_aliases(
    build,
    "build",
    ["b"],
    help="🔨 Build the frontend assets using Vite",
)


def server(
    port: int = typer.Option(8000, "--port", "-p", help="🔌 Port to run on"),
    host: str = typer.Option("localhost", "--host", "-H", help="🏠 Host to bind to"),
    reload: bool = typer.Option(False, "--reload", "-r", help="🔄 Enable auto-reload on code changes", is_flag=True),
    log_level: LogLevel = typer.Option(LogLevel.INFO, "--log-level", "-l", help="📝 Logging level"),
    no_build: bool = typer.Option(False, "--no-build", help="⚡ Skip building frontend", is_flag=True),
    watch: bool = typer.Option(
        False,
        "--watch",
        "-w",
        help="👀 Watch for frontend changes and rebuild (ignored with no-build flag)",
        is_flag=True,
    ),
    frontend_server: bool = typer.Option(
        False, "--frontend-server", "-fe", help="🌐 Start only the frontend dev server", is_flag=True
    ),
):
    rerun_in_poetry()

    try:
        process = None
        if not no_build:
            if watch:
                process = run_command_in_background(
                    ["npx", "vite", "build", "--watch"], "Building frontend with watch mode"
                )
            elif frontend_server:
                process = run_command_in_background(["npx", "vite", "dev"], "Starting frontend dev server")
            else:
                if build(False) != 0:
                    raise typer.Exit(1)

        import uvicorn

        sys.path.insert(0, os.getcwd())

        from backend.custom_logging import server_logger

        startup_info = Text()
        startup_info.append("🚀 Server: ", style="bold bright_yellow")
        startup_info.append(f"http://{host}:{port}", style="bold blue underline")
        startup_info.append("\n📖 API Docs: ", style="bold bright_yellow")
        startup_info.append(f"http://{host}:{port}/docs", style="bold blue underline")
        startup_info.append("\n📚 ReDoc: ", style="bold bright_yellow")
        startup_info.append(f"http://{host}:{port}/redoc", style="bold blue underline")

        if not no_build and frontend_server:
            startup_info.append("\n🌐 Frontend Dev Server: ", style="bold bright_yellow")
            startup_info.append("http://localhost:8001", style="bold blue underline")

        panel = Panel(
            startup_info,
            title="🎯 Raddle Teams Server Starting",
            title_align="left",
            border_style="bright_green",
            padding=(1, 2),
        )
        console.print(panel)

        server_logger.info("Initializing FastAPI server startup")
        server_logger.info(f"Server will be available at: http://{host}:{port}")
        server_logger.info(f"API docs will be available at: http://{host}:{port}/docs")
        server_logger.info(f"ReDoc will be available at: http://{host}:{port}/redoc")

        server_logger.info(
            f"Server configuration - Host: {host}, Port: {port}, Reload: {reload}, Log Level: {log_level}"
        )

        cwd = os.getcwd()
        server_logger.debug(f"Current working directory: {cwd}")

        # add the current working directory to the sys.path
        sys.path.insert(0, cwd)

        # add the packages/functions/test directory to the sys.path from the current working directory
        sys.path.insert(0, f"{cwd}/backend")
        sys.path.insert(0, f"{cwd}/")

        server_logger.debug(f"Python path updated: {sys.path[:3]}")

        try:
            server_logger.info("Starting uvicorn server")
            uvicorn.run(
                "backend.main:app",
                host=host,
                port=port,
                log_level=log_level,
                reload=reload,
            )
        except KeyboardInterrupt:
            server_logger.info("Server stopped by user (KeyboardInterrupt)")
            console.print("[bold yellow]🛑 Server stopped by user[/bold yellow]")
        except Exception as e:
            server_logger.error(f"Error starting server: {e}")
            console.print(f"[bold red]❌ Error starting server: {e}[/bold red]")
            raise typer.Exit(1)
    finally:
        if not no_build and watch and process is not None:
            try:
                process.terminate()
                process.wait()
            except Exception as e:
                server_logger.error(f"Error stopping watch process: {e}")
                console.print(f"[bold red]❌ Error stopping watch process: {e}[/bold red]")


add_command_and_aliases(
    server,
    "server",
    ["s", "serve"],
    help="🚀 Start the FastAPI server with optional frontend building and watching",
)


def vitest(
    v: bool = typer.Option(False, "--verbose", "-v", help="🔍 Enable verbose output"),
    vv: bool = typer.Option(False, "--very-verbose", "-vv", help="🔍🔍 Enable very verbose output"),
    vvv: bool = typer.Option(False, "--very-very-verbose", "-vvv", help="🔍🔍🔍 Enable very very verbose output"),
    filter: str = typer.Option(None, "--filter", "-f", help="🔍 Filter tests by name"),
):
    """⚡ Run vitest unit tests"""
    console.print("[bold magenta]⚡ Running vitest unit tests...[/bold magenta]")

    vitest_cmd = ["npx", "vitest", "run"]

    # Add verbose flags
    if v:
        vitest_cmd.append("--reporter=verbose")
    elif vv or vvv:
        vitest_cmd.extend(["--reporter=verbose", "--verbose"])

    # Add filter
    if filter:
        vitest_cmd.extend(["-t", filter])

    return run_command(vitest_cmd, "Running vitest unit tests")


add_command_and_aliases(
    vitest,
    "vitest",
    ["vi"],
    help="⚡ Run vitest unit tests",
)


def test(
    ctx: typer.Context,
    v: bool = typer.Option(False, "--verbose", "-v", help="🔍 Enable verbose output"),
    vv: bool = typer.Option(False, "--very-verbose", "-vv", help="🔍🔍 Enable very verbose output"),
    vvv: bool = typer.Option(False, "--very-very-verbose", "-vvv", help="🔍🔍🔍 Enable very very verbose output"),
    filter: str = typer.Option(None, "--filter", "-f", help="🔍 Filter tests by name"),
    record: bool = typer.Option(False, "--record", "-r", help="📹 Enable video/trace recording"),
    slow_mo: bool = typer.Option(
        False,
        "--slow-mo",
        "-sm",
        help="🐌 Enable slow motion mode when running tests, will run headless and operate slowly",
    ),
    super_slow_mo: bool = typer.Option(
        False,
        "--super-slow-mo",
        "-ssm",
        help="🐢 Enable super slow motion mode when running tests, will run headless and operate very slowly",
    ),
    debug: bool = typer.Option(False, "--debug", "-d", help="🐛 Enable playwrights debug mode", is_flag=True),
):
    rerun_in_poetry()

    if build(False) != 0:
        raise typer.Exit(1)

    import pytest

    # get the current working directory
    cwd = os.getcwd()

    # add the current working directory to the sys.path
    sys.path.insert(0, cwd)

    # add the test directory to the sys.path from the current working directory
    sys.path.insert(0, f"{cwd}/tests")
    sys.path.insert(0, f"{cwd}/tests/e2e")
    sys.path.insert(0, f"{cwd}/tests/e2e/fixtures")
    sys.path.insert(0, f"{cwd}/tests/e2e/utilities")

    records_dirs = [
        f"{cwd}/tests/e2e/recordings/screenshots",
        f"{cwd}/tests/e2e/recordings/videos",
        f"{cwd}/tests/e2e/recordings/traces",
    ]

    with Progress(
        SpinnerColumn(),
        TextColumn("[bold blue]{task.description}"),
        console=console,
    ) as progress:
        cleanup_task = progress.add_task("[yellow]🧹 Cleaning up old test recordings...", total=None)

        for records_dir in records_dirs:
            if os.path.exists(records_dir):
                for root, dirs, files in os.walk(records_dir, topdown=False):
                    for name in files:
                        os.remove(os.path.join(root, name))
                    for name in dirs:
                        os.rmdir(os.path.join(root, name))

        progress.update(cleanup_task, completed=True)

    console.print("[green]✨ Test recordings cleaned up![/green]")

    test_config = Text()
    test_config.append("🎦 Mode: ", style="bold bright_yellow")

    modes = []
    if record:
        modes.append("📹 Recording")
    if debug:
        modes.append("🐛 Debug")
    if slow_mo:
        modes.append("🐌 Slow Motion")
    if super_slow_mo:
        modes.append("🐢 Super Slow")
    if v or vv or vvv:
        verbose_level = "v" * (1 if v else 2 if vv else 3)
        modes.append(f"🔍 Verbose ({verbose_level})")

    if modes:
        test_config.append(", ".join(modes), style="blue")
    else:
        test_config.append("Standard", style="blue")

    if filter:
        test_config.append("\n🎯 Filter: ", style="bold bright_yellow")
        test_config.append(filter, style="blue")

    config_panel = Panel(
        test_config, title="🧪 Test Configuration", title_align="left", border_style="bright_magenta", padding=(1, 2)
    )
    console.print(config_panel)

    command_line_args = []

    if v:
        command_line_args.append("-v")
    if vv:
        command_line_args.append("-vv")
    if vvv:
        command_line_args.append("-vvv")
    if filter:
        command_line_args.extend(["-k", filter])

    # Add any additional pytest arguments passed through
    if ctx.params:
        command_line_args.extend(ctx.args)

    try:
        os.environ["RADDLE_ENV"] = "testing"

        if record:
            os.environ["PYTEST_RECORD"] = "1"

        if slow_mo or super_slow_mo:
            time_between_actions = "500"
            if super_slow_mo:
                time_between_actions = "1000"
            os.environ["PYTEST_SLOW_MO"] = time_between_actions

        if debug:
            os.environ["PWDEBUG"] = "1"

        try:
            sys.exit(pytest.main(command_line_args))
        except Exception as e:
            console.print(f"[bold red]❌ Error running tests: {e}[/bold red]")
            typer.Exit(1)
    finally:
        del os.environ["RADDLE_ENV"]

        if "PYTEST_RECORD" in os.environ:
            del os.environ["PYTEST_RECORD"]

        if "PYTEST_SLOW_MO" in os.environ:
            del os.environ["PYTEST_SLOW_MO"]

        if "PWDEBUG" in os.environ:
            del os.environ["PWDEBUG"]


add_command_and_aliases(
    test,
    "test",
    ["t"],
    help="🧪 Run the Python e2e test suite with Playwright",
    context_settings={"allow_extra_args": True, "ignore_unknown_options": True},
)


def format(
    check: bool = typer.Option(False, "--check", help="🔍 Check formatting without changing files"),
    frontend_only: bool = typer.Option(False, "--frontend-only", help="✨ Only format frontend"),
    backend_only: bool = typer.Option(False, "--backend-only", help="🐍 Only format backend"),
):
    success = True

    if not backend_only:
        console.print("[bold magenta]🎨 Formatting frontend (Prettier)...[/bold magenta]")
        if check:
            if run_command(["npx", "prettier", "--check", "."], "Checking frontend formatting (Prettier)") != 0:
                success = False
            if (
                run_command(
                    ["npx", "eslint", ".", "--report-unused-disable-directives", "--max-warnings", "0"],
                    "Checking frontend formatting (ESLint)",
                )
                != 0
            ):
                success = False
            if run_command(["npx", "tsc", "--noEmit"], "Checking TypeScript types") != 0:
                success = False
        else:
            if run_command(["npx", "prettier", "--write", "."], "Formatting frontend (Prettier)") != 0:
                success = False
            if run_command(["npx", "eslint", ".", "--fix"], "Formatting frontend (ESLint)") != 0:
                success = False

    if not frontend_only:
        if check:
            if run_command(["poetry", "run", "ruff", "check", "."], "Checking backend formatting (Ruff)") != 0:
                success = False
        else:
            if run_command(["poetry", "run", "ruff", "format", "."], "Formatting backend (Ruff)") != 0:
                success = False

    if success:
        console.print("[bold green]✅ All formatting completed successfully![/bold green]")
        return 0
    else:
        console.print("[bold red]❌ Some formatting failed![/bold red]")
        return 1


add_command_and_aliases(
    format,
    "format",
    ["f", "fmt"],
    help="🎨 Format code using Prettier (frontend) and Ruff (backend)",
)


def trace(
    file: str = typer.Argument(..., help="📄 Path to the trace file to view"),
):
    return run_command(["npx", "playwright", "show-trace", file], "Opening Playwright trace viewer")


add_command_and_aliases(
    trace,
    "trace",
    ["tr", "view-trace"],
    help="🔍 Open Playwright trace viewer for test recordings",
)


def install(
    sync: bool = typer.Option(False, "--sync", "-s", help="🔄 Sync dependencies without reinstalling", is_flag=True),
):
    install_info = Text()
    install_info.append("🐍 Python: ", style="bold yellow")
    install_info.append("poetry install", style="blue")
    if sync:
        install_info.append(" sync", style="dim blue")
    install_info.append("\n🟢 Node.js: ", style="bold yellow")
    install_info.append("npm ci" if sync else "npm install", style="blue")

    panel = Panel(
        install_info, title="📦 Installing Dependencies", title_align="left", border_style="bright_cyan", padding=(1, 2)
    )
    console.print(panel)

    poetry_command = ["poetry", "install"]
    if sync:
        poetry_command = ["poetry", "sync"]
    if run_command(poetry_command, "Installing Python dependencies") != 0:
        raise typer.Exit(1)

    if sync:
        npm_command = ["npm", "ci"]
    else:
        npm_command = ["npm", "install"]

    if run_command(npm_command, "Installing Node.js dependencies") != 0:
        raise typer.Exit(1)

    success_panel = Panel(
        "[bold green]✅ All dependencies installed successfully![/bold green]\n[dim green]Ready to build and run! 🎉[/dim green]",
        border_style="green",
        padding=(1, 2),
    )
    console.print(success_panel)
    return 0


add_command_and_aliases(
    install,
    "install",
    ["i", "deps"],
    help="📦 Install Python and Node.js dependencies",
)


def version_callback(value: bool):
    if value:
        banner = Text()
        banner.append("🎲 ", style="bold red")
        banner.append("Raddle Teams", style="bold bright_white")
        banner.append(" Command Runner", style="bold blue")
        banner.append("\n📋 Version: ", style="bold bright_yellow")
        banner.append("1.0.0", style="bold cyan")
        banner.append("\n🚀 ", style="bold yellow")
        banner.append("Ready for development!", style="bright_green")
        banner.append("\n💻 ", style="bold blue")
        banner.append("Built with Rich & Typer", style="dim white")

        banner_panel = Panel(banner, border_style="bright_blue", padding=(1, 2), title="📖 About")
        console.print(banner_panel)
        raise typer.Exit()


@app.callback(invoke_without_command=True)
def main(
    version: bool = typer.Option(
        False, "--version", "-v", callback=version_callback, is_eager=True, help="📖 Show version information"
    ),
):
    pass


if __name__ == "__main__":
    app()
